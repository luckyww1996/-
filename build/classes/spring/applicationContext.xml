<?xml version="1.0"?>
<beans xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd " xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.springframework.org/schema/beans">

<!-- 数据源，使用dbcp -->
<bean destroy-method="close" class="org.apache.commons.dbcp.BasicDataSource" id="dataSource">
<property value="com.mysql.jdbc.Driver" name="driverClassName"/>
<property value="jdbc:mysql://172.16.61.136:3306/yunshang?characterEncoding=UTF-8" name="url"/>
<property value="root" name="username"/>
<property value="123456" name="password"/>

<!-- 配置连接池 -->
<!-- 初始化连接大小 -->
<property value="3" name="initialSize"/>
<!-- 连接池最大数量 -->
<property value="10" name="maxActive"/>
<!-- 连接池最大空闲 -->
<property value="10" name="maxIdle"/>
<!-- 连接池最小空闲 -->
<property value="0" name="minIdle"/>
<!-- 获取连接最大等待时间,毫秒 -->
<property value="5000" name="maxWait"/>
</bean>

<!-- 创建sqlSessinFactory -->
<bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
<!-- 数据源 -->
<property name="dataSource" ref="dataSource"/>
<!-- 加载mybatis的配置文件 -->
<property value="classpath:mybatis/MyBatisConfig.xml" name="configLocation"/>
</bean>

<!-- 事务管理器 对mybatis操作数据库事务控制，spring使用jdbc的事务控制类 -->
<bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager" id="transactionManager">
<property name="dataSource" ref="dataSource"/>
</bean>

<!-- 通知 -->
<tx:advice id="txAdvice" transaction-manager="transactionManager">
<tx:attributes>
<!-- 传播行为 -->
<tx:method name="Save*" propagation="REQUIRED"/>
<tx:method name="Delete*" propagation="REQUIRED"/>
<tx:method name="Insert*" propagation="REQUIRED"/>
<tx:method name="Update*" propagation="REQUIRED"/>

<tx:method name="Find*" propagation="SUPPORTS" read-only="true"/>
<tx:method name="Query*" propagation="SUPPORTS" read-only="true"/>
<tx:method name="Get*" propagation="SUPPORTS" read-only="true"/>
<tx:method name="Select*" propagation="SUPPORTS" read-only="true"/>
<tx:method name="*" propagation="REQUIRED" read-only="true"/>
</tx:attributes>
</tx:advice>

<!-- aop（切面编程）配置 pointcut属性设置示例：任意公共方法的执行： execution(public * *(..)) 任何一个以“set”开始的方法的执行： execution(* set*(..))AccountService 接口的任意方法的执行： execution(* com.xyz.service.AccountService.*(..)) 定义在service包里的任意方法的执行： execution(* com.xyz.service.*.*(..)) 定义在service包和所有子包里的任意类的任意方法的执行： execution(* com.xyz.service..*.*(..)) 定义在pointcutexp包和所有子包里的JoinPointObjP2类的任意方法的执行： execution(* com.test.spring.aop.pointcutexp..JoinPointObjP2.*(..))") -->
<aop:config>
<aop:advisor pointcut="execution(* com.ssm.demo.service.*.*(..))" advice-ref="txAdvice"/>
</aop:config>

<!-- mapper批量扫描，从mapper包中扫描出mapper接口，自动创建代理对象并且在spring容器中注册 遵循规范：将mapper.java和mapper.xml映射文件名称保持一致，且在一个目录中 自动扫描出来的mapper的bean的id为mapper类名（首字母小写） -->
<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
<!-- 指定扫描的包名，如有多个包，每个包中间使用逗号分隔 -->
<property value="com.ssm.yunshang.dao" name="basePackage"/>
<property name="sqlSessionFactory" ref="sqlSessionFactory"/>
<!-- <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/> -->
</bean>
</beans>